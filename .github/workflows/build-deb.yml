name: Build Deb Package

on:
  push:
  workflow_dispatch:
  workflow_call:
    inputs:
      ref:
        description: 'Git ref to build from'
        default: ${{ github.ref }}
        required: true
        type: string
      version:
        description: 'Version string (e.g., 2.5.0-rc1)'
        required: false
        type: string

jobs:
  build-deb:
    name: Build Debian/Ubuntu Package
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          fetch-tags: true
          fetch-depth: 0

      - name: Install minimal dependencies
        run: |
          sudo apt update
          sudo apt install -y dpkg-dev dpkg-sig

      - name: Import GPG key for signing
        continue-on-error: true
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.PKG_SIGNING_KEY_DEB }}

      - name: Build package
        env:
          SIGN_PACKAGE: "1"
        run: |
          if [[ -n "${{ inputs.version }}" ]]; then
            ./tools/build_debs.sh "${{ inputs.version }}"
          else
            ./tools/build_debs.sh
          fi

      - name: Determine version for artifact naming
        id: version
        run: |
          if [[ -n "${{ inputs.version }}" ]]; then
            VERSION="${{ inputs.version }}"
          else
            VERSION=$(grep -E '^\s*#define\s+TENSTORRENT_DRIVER_VERSION_MAJOR\s+' module.h | awk '{print $3}').$(grep -E '^\s*#define\s+TENSTORRENT_DRIVER_VERSION_MINOR\s+' module.h | awk '{print $3}').$(grep -E '^\s*#define\s+TENSTORRENT_DRIVER_VERSION_PATCH\s+' module.h | awk '{print $3}')$(grep -E '^\s*#define\s+TENSTORRENT_DRIVER_VERSION_SUFFIX\s+' module.h | sed -E 's/.*"(.*)".*/\1/')
          fi
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Building version: ${VERSION}"

      - name: Upload Debian package
        uses: actions/upload-artifact@v4
        with:
          name: tenstorrent-dkms_${{ steps.version.outputs.version }}_all.deb
          path: tenstorrent-dkms_${{ steps.version.outputs.version }}_all.deb

      - name: Display package info
        run: |
          echo "=== Package Information ==="
          dpkg-deb --info tenstorrent-dkms_${{ steps.version.outputs.version }}_all.deb
          echo ""
          echo "=== Package Signature (if signed) ==="
          dpkg-sig --verify tenstorrent-dkms_${{ steps.version.outputs.version }}_all.deb || echo "Package not signed or dpkg-sig not available"

